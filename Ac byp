-- // Anti-kick / hook bypass
for Key, Object in pairs(getgc(true)) do
    if type(Object) == 'table' then
        setreadonly(Object, false)
        local indexInstance = rawget(Object, 'indexInstance')
        if type(indexInstance) == 'table' and indexInstance[1] == 'kick' then
            setreadonly(indexInstance, false)
            rawset(Object, 'Table', {
                'kick',
                function()
                    coroutine.yield()
                end,
            })
            break
        end
    end
end

assert(getrawmetatable)
grm = getrawmetatable(game)
setreadonly(grm, false)
old = grm.__namecall

grm.__namecall = newcclosure(function(self, ...)
    local args = { ... }

    local methodName = tostring(args[1])

    local blockedMethods = {
        'TeleportDetect',
        'CHECKER_1',
        'CHECKER',
        'GUI_CHECK',
        'OneMoreTime',
        'checkingSPEED',
        'BANREMOTE',
        'PERMAIDBAN',
        'KICKREMOTE',
        'BR_KICKPC',
        'BR_KICKMOBILE',
    }

    if table.find(blockedMethods, methodName) then
        return
    end

    return old(self, ...)
end)

-- // Dependencies
_G.PRED = 0.025
local Aiming = loadstring(
    game:HttpGet(
        'https://raw.githubusercontent.com/Ezucii/new/main/sourceeeeeeeeeeeeee.lua'
    )
)()
Aiming.TeamCheck(false)
Aiming.ShowFOV = false
Aiming.FOV = 55

-- // Services
local Workspace = game:GetService('Workspace')
local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local UserInputService = game:GetService('UserInputService')

-- // Vars
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local CurrentCamera = Workspace.CurrentCamera

local DaHoodSettings = {
    SilentAim = true,
    AimLock = false,
    Prediction = 0.121,
    AimLockKeybind = Enum.KeyCode.E,
}
getgenv().DaHoodSettings = DaHoodSettings

-- // Overwrite Aiming.Check to account for downed / grabbed
function Aiming.Check()
    if
        not (
            Aiming.Enabled
            and Aiming.Selected ~= LocalPlayer
            and Aiming.SelectedPart ~= nil
        )
    then
        return false
    end

    local Character = Aiming.Character(Aiming.Selected)
    if not Character then
        return false
    end

    local KOd = Character:FindFirstChild('BodyEffects')
        and Character.BodyEffects:FindFirstChild('K.O')
        and Character.BodyEffects['K.O'].Value
    local Grabbed = Character:FindFirstChild('GRABBING_CONSTRAINT') ~= nil

    if KOd or Grabbed then
        return false
    end

    return true
end

-- // HOOK __index for silent aim spoof
local __index
__index = hookmetamethod(game, '__index', function(t, k)
    if t:IsA('Mouse') and (k == 'Hit' or k == 'Target') and Aiming.Check() then
        local SelectedPart = Aiming.SelectedPart
        if DaHoodSettings.SilentAim and (k == 'Hit' or k == 'Target') then
            local Hit = SelectedPart.CFrame
                + (SelectedPart.Velocity * DaHoodSettings.Prediction)
            return (k == 'Hit' and Hit or SelectedPart)
        end
    end
    return __index(t, k)
end)

-- // Key toggle for Aiming.Enabled
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

mouse.KeyDown:Connect(function(key)
    if key == 'v' then
        Aiming.Enabled = not Aiming.Enabled
    end
end)

-- // Prediction updater + jump state logic
RunService.RenderStepped:Connect(function()
    local ping = game:GetService('Stats').Network.ServerStatsItem['Data Ping']
        :GetValueString()
    local Value = tostring(ping)
    local pingValue = Value:split(' ')
    local PingNumber = tonumber(pingValue[1]) or 50

    DaHoodSettings.Prediction = PingNumber / 1000 + _G.PRED

    if
        Aiming.Selected
        and Aiming.Character
        and Aiming.Character:FindFirstChild('Humanoid')
    then
        if
            Aiming.Character.Humanoid.Jump == true
            and Aiming.Character.Humanoid.FloorMaterial == Enum.Material.Air
        then
            Aiming.TargetPart = 'RightFoot'
        else
            Aiming.TargetPart = Aiming.SelectedPart
        end
    end
end)

-- ================================
-- ðŸ”§ CENTER FOV CIRCLE ON SCREEN
-- ================================
RunService.RenderStepped:Connect(function()
    if Aiming.FOVCircle then
        local cam = workspace.CurrentCamera
        Aiming.FOVCircle.Position =
            Vector2.new(cam.ViewportSize.X / 2, cam.ViewportSize.Y / 2)
    end
end)

-- ================================
-- ðŸŽ¯ CENTER SCREEN TARGETING FIX
-- ================================
function GetClosestToCenter()
    local closestPlayer, closestPart, shortestDistance = nil, nil, math.huge
    local camera = workspace.CurrentCamera
    local screenCenter =
        Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)

    for _, player in ipairs(Players:GetPlayers()) do
        if
            player ~= LocalPlayer
            and player.Character
            and player.Character:FindFirstChild('HumanoidRootPart')
            and player.Character:FindFirstChild('Humanoid')
        then
            if player.Character.Humanoid.Health > 0 then
                local character = player.Character
                local targetPart = character:FindFirstChild('Head')
                    or character:FindFirstChild('HumanoidRootPart')
                if targetPart then
                    local screenPos, onScreen =
                        camera:WorldToViewportPoint(targetPart.Position)
                    if onScreen then
                        local distance = (
                            Vector2.new(screenPos.X, screenPos.Y) - screenCenter
                        ).Magnitude
                        if
                            distance < (Aiming.FOV * 3)
                            and distance < shortestDistance
                        then
                            shortestDistance = distance
                            closestPlayer = player
                            closestPart = targetPart
                        end
                    end
                end
            end
        end
    end

    Aiming.Selected = closestPlayer
    Aiming.SelectedPart = closestPart
end

-- Auto-select closest target to center
RunService.RenderStepped:Connect(function()
    if Aiming.Enabled and DaHoodSettings.SilentAim then
        GetClosestToCenter()
    else
        Aiming.Selected = nil
        Aiming.SelectedPart = nil
    end
end)
